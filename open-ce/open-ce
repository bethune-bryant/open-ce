#!/usr/bin/env python
"""
*****************************************************************
Licensed Materials - Property of IBM
(C) Copyright IBM Corp. 2020. All Rights Reserved.
US Government Users Restricted Rights - Use, duplication or
disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
*****************************************************************
"""

import sys
import argparse
import utils
import argparse
from errors import OpenCEError, Error
import build_env
import build_feedstock
import test_feedstock
import validate_config
import validate_env
import build_image

def make_parser():
    ''' Parser for input arguments '''
    parser = argparse.ArgumentParser(description = 'Open-CE Tool')

    subparsers = parser.add_subparsers(title='Open-CE Commands',
                                       description='Valid Commands',
                                       required=True)

    build_env_parser = utils.add_subparser(subparsers, build_env.COMMAND, build_env.ARGUMENTS, help=build_env.DESCRIPTION)
    build_env_parser.set_defaults(func=build_env.build_env)

    build_feedstock_parser = utils.add_subparser(subparsers, build_feedstock.COMMAND, build_feedstock.ARGUMENTS, help=build_feedstock.DESCRIPTION)
    build_feedstock_parser.set_defaults(func=build_feedstock.build_feedstock)

    test_feedstock_parser = utils.add_subparser(subparsers, test_feedstock.COMMAND, test_feedstock.ARGUMENTS, help=test_feedstock.DESCRIPTION)
    test_feedstock_parser.set_defaults(func=test_feedstock.test_feedstock)

    validate_config_parser = utils.add_subparser(subparsers, validate_config.COMMAND, validate_config.ARGUMENTS, help=validate_config.DESCRIPTION)
    validate_config_parser.set_defaults(func=validate_config.validate_config)

    validate_env_parser = utils.add_subparser(subparsers, validate_env.COMMAND, validate_env.ARGUMENTS, help=validate_env.DESCRIPTION)
    validate_env_parser.set_defaults(func=validate_env.validate_env)

    build_image_parser = utils.add_subparser(subparsers, build_image.COMMAND, build_image.ARGUMENTS, help=build_image.DESCRIPTION)
    build_image_parser.set_defaults(func=build_image.build_runtime_docker_image)

    return parser

def _main(arg_strings=None):
    parser = make_parser()
    if len(sys.argv) == 1:
        parser.print_help()
        return
    args = parser.parse_args(arg_strings)
    args.func(args)

if __name__ == '__main__':
    try:
        _main()
    except OpenCEError as err:
        print(err.msg, file=sys.stderr)
        sys.exit(1)

    sys.exit(0)
