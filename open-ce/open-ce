#!/usr/bin/env python
"""
*****************************************************************
Licensed Materials - Property of IBM
(C) Copyright IBM Corp. 2020. All Rights Reserved.
US Government Users Restricted Rights - Use, duplication or
disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
*****************************************************************
"""

import sys
import argparse
import utils
from errors import OpenCEError, Error
import build_env
import build_feedstock
import test_feedstock
import validate_config
import validate_env

def make_parser():
    ''' Parser for input arguments '''
    parser = utils.make_parser([], description = 'Open-CE Tool')

    subparsers = parser.add_subparsers(title='Open-CE Commands',
                                       description='Valid Commands',
                                       required=True)

    build_env_parser = subparsers.add_parser('build_env', parents=[build_env.make_parser()], add_help=False, help=build_env.DESCRIPTION)
    build_env_parser.set_defaults(func=build_env._build_env_parsed)

    build_feedstock_parser = subparsers.add_parser('build_feedstock', parents=[build_feedstock.make_parser()], add_help=False, help=build_feedstock.DESCRIPTION)
    build_feedstock_parser.set_defaults(func=build_feedstock._build_feedstock_parsed)

    test_feedstock_parser = subparsers.add_parser('test_feedstock', parents=[test_feedstock.make_parser()], add_help=False, help=test_feedstock.DESCRIPTION)
    test_feedstock_parser.set_defaults(func=test_feedstock._test_feedstock_parsed)

    validate_config_parser = subparsers.add_parser('validate_config', parents=[validate_config.make_parser()], add_help=False, help=validate_config.DESCRIPTION)
    validate_config_parser.set_defaults(func=validate_config._validate_config_parsed)

    validate_env_parser = subparsers.add_parser('validate_env', parents=[validate_env.make_parser()], add_help=False, help=validate_env.DESCRIPTION)
    validate_env_parser.set_defaults(func=validate_env._validate_env_parsed)

    return parser

def _main(arg_strings=None):
    parser = make_parser()
    if len(sys.argv) == 1:
        parser.print_help()
        return
    args = parser.parse_args(arg_strings)
    args.func(args)

if __name__ == '__main__':
    try:
        _main()
    except OpenCEError as err:
        print(err.msg, file=sys.stderr)
        sys.exit(1)

    sys.exit(0)
